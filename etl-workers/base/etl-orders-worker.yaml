logger:
  level: DEBUG
  format: json
  add_timestamp: true
  static_fields:
    '@service': etl-orders-worker

input:
  kafka:
    addresses:
      - kafka-hub-kafka-bootstrap.kafka-hub.svc.cluster.local:9092
    topics:
      - pg-core.postgres.orders
    consumer_group: "etl-orders-worker"
    start_from_oldest: false
    group:
      session_timeout: 10s
      heartbeat_interval: 3s
      rebalance_timeout: 60s
    batching:
      count: 200
      period: 1s

pipeline:
  processors:
    - log:
        level: DEBUG
        message: "received messages"
        fields_mapping: |
          root.data = this

    - mapping: |
        root = this.after

output_resources:
  - label: insert_metrics_clickhouse
    sql_raw:
      driver: "clickhouse"
      dsn: "clickhouse://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
      query: '${!metadata("ddl_query")}'
      args_mapping: root = this.query_parameter
      unsafe_dynamic_query: true

output:
  broker:
    pattern: fan_out
    outputs:
      - resource: insert_metrics_clickhouse
        processors:
          - mapping: |
              root.id = this.id 
              root.created_at = this.created_at.ts_parse("2006-01-02T15:04:05.000000Z").ts_format("2006-01-02 15:04:05.000000000")
              root.completed_at = this.completed_at.ts_parse("2006-01-02T15:04:05.000000Z").ts_format("2006-01-02 15:04:05.000000000")
              root.customer_id = this.customer_id
              root.customer_name = this.customer_name
              root.order_number = this.order_number
              root.order_state = this.order_state
              root.order_type = this.order_type
              root.total_price = this.total_price
          - mapping: |
              root.query_parameter = [ 
                this.id, 
                this.created_at,
                this.completed_at,
                this.customer_id,
                this.customer_name,
                this.order_number,
                this.order_state,
                this.order_type,
                this.total_price
              ]

              root.ddl_query = "INSERT INTO trx_orders (  "
              root.ddl_query = root.ddl_query + "  id, created_at, completed_at, customer_id, customer_name,  "
              root.ddl_query = root.ddl_query + "  order_number, order_state, order_type, total_price "
              root.ddl_query = root.ddl_query + ") SETTINGS async_insert=1, wait_for_async_insert=1, wait_for_async_insert_timeout=120 VALUES (  "
              root.ddl_query = root.ddl_query + "  ?, ?, ?, ?, ?, "
              root.ddl_query = root.ddl_query + "  ?, ?, ?, ?  "
              root.ddl_query = root.ddl_query + ");  "

              meta ddl_query = root.ddl_query
              root.ddl_query = deleted()

          - log:
              level: DEBUG
              message: "handle DDL"
              fields_mapping: |
                root.query_parameter = this.query_parameter
                root.ddl_query = @.ddl_query
